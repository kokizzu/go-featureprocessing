// Code generated by go-featureprocessing DO NOT EDIT

package examplemodule

import (
	"sync"

	fp "github.com/nikolaydubina/go-featureprocessing/transformers"
)

// WeirdTagsFeatureTransformer is a feature processor for WeirdTags.
// It was automatically generated by go-featureprocessing tool.
type WeirdTagsFeatureTransformer struct {
	OnlyFeature     fp.MinMaxScaler    `json:"OnlyFeature_minmax"`
	FeatureNotFirst fp.MaxAbsScaler    `json:"FeatureNotFirst_maxabs"`
	FirstFeature    fp.OneHotEncoder   `json:"FirstFeature_onehot"`
	Multiline       fp.MaxAbsScaler    `json:"Multiline_maxabs"`
	A안녕하세요          fp.MinMaxScaler    `json:"A안녕하세요_minmax"`
	B안녕하세요1         fp.OneHotEncoder   `json:"B안녕하세요1_onehot"`
	C안녕하세요0         fp.TFIDFVectorizer `json:"C안녕하세요0_tfidf"`
}

// Fit fits transformer for each field
func (e *WeirdTagsFeatureTransformer) Fit(s []WeirdTags) {
	if e == nil || len(s) == 0 {
		return
	}

	dataNum := make([]float64, len(s))
	dataStr := make([]string, len(s))

	for i, v := range s {
		dataNum[i] = float64(v.OnlyFeature)
	}

	e.OnlyFeature.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.FeatureNotFirst)
	}

	e.FeatureNotFirst.Fit(dataNum)

	for i, v := range s {
		dataStr[i] = v.FirstFeature
	}

	e.FirstFeature.Fit(dataStr)

	for i, v := range s {
		dataNum[i] = float64(v.Multiline)
	}

	e.Multiline.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.A안녕하세요)
	}

	e.A안녕하세요.Fit(dataNum)

	for i, v := range s {
		dataStr[i] = v.B안녕하세요1
	}

	e.B안녕하세요1.Fit(dataStr)

	for i, v := range s {
		dataStr[i] = v.C안녕하세요0
	}

	e.C안녕하세요0.Fit(dataStr)

}

// Transform transforms struct into feature vector accordingly to transformers
func (e *WeirdTagsFeatureTransformer) Transform(s *WeirdTags) []float64 {
	if s == nil || e == nil {
		return nil
	}
	features := make([]float64, e.NumFeatures())
	e.TransformInplace(features, s)
	return features
}

// TransformInplace transforms struct into feature vector accordingly to transformers, and does so inplace
func (e *WeirdTagsFeatureTransformer) TransformInplace(dst []float64, s *WeirdTags) {
	if s == nil || e == nil || len(dst) != e.NumFeatures() {
		return
	}
	idx := 0

	dst[idx] = e.OnlyFeature.Transform(float64(s.OnlyFeature))
	idx++

	dst[idx] = e.FeatureNotFirst.Transform(float64(s.FeatureNotFirst))
	idx++

	e.FirstFeature.TransformInplace(dst[idx:idx+e.FirstFeature.NumFeatures()], s.FirstFeature)
	idx += e.FirstFeature.NumFeatures()

	dst[idx] = e.Multiline.Transform(float64(s.Multiline))
	idx++

	dst[idx] = e.A안녕하세요.Transform(float64(s.A안녕하세요))
	idx++

	e.B안녕하세요1.TransformInplace(dst[idx:idx+e.B안녕하세요1.NumFeatures()], s.B안녕하세요1)
	idx += e.B안녕하세요1.NumFeatures()

	e.C안녕하세요0.TransformInplace(dst[idx:idx+e.C안녕하세요0.NumFeatures()], s.C안녕하세요0)
	idx += e.C안녕하세요0.NumFeatures()

}

// TransformAll transforms a slice of WeirdTags
func (e *WeirdTagsFeatureTransformer) TransformAll(s []WeirdTags) []float64 {
	if e == nil {
		return nil
	}
	features := make([]float64, len(s)*e.NumFeatures())
	e.TransformAllInplace(features, s)
	return features
}

// TransformAllInplace transforms a slice of WeirdTags inplace
func (e *WeirdTagsFeatureTransformer) TransformAllInplace(dst []float64, s []WeirdTags) {
	if e == nil {
		return
	}
	n := e.NumFeatures()
	if len(dst) != n*len(s) {
		return
	}
	for i := range s {
		e.TransformInplace(dst[i*n:(i+1)*n], &s[i])
	}
}

// TransformAllParallel transforms a slice of WeirdTags in parallel
func (e *WeirdTagsFeatureTransformer) TransformAllParallel(s []WeirdTags, nworkers uint) []float64 {
	if e == nil {
		return nil
	}
	features := make([]float64, len(s)*e.NumFeatures())
	e.TransformAllInplaceParallel(features, s, nworkers)
	return features
}

// TransformAllInplaceParallel transforms a slice of WeirdTags inplace parallel
// Useful for very large slices.
func (e *WeirdTagsFeatureTransformer) TransformAllInplaceParallel(dst []float64, s []WeirdTags, nworkers uint) {
	if e == nil || nworkers == 0 {
		return
	}
	ns := uint(len(s))
	nf := uint(e.NumFeatures())
	if uint(len(dst)) != nf*ns {
		return
	}

	nbatch := ns / nworkers
	var wg sync.WaitGroup

	for i := uint(0); i < nworkers; i++ {
		wg.Add(1)
		go func(i uint) {
			defer wg.Done()
			iStart := nbatch * i
			iEnd := nbatch * (i + 1)
			if i == (nworkers - 1) {
				iEnd = ns
			}
			e.TransformAllInplace(dst[iStart*nf:iEnd*nf], s[iStart:iEnd])
		}(i)
	}

	wg.Wait()
}

// NumFeatures returns number of features in output feature vector
func (e *WeirdTagsFeatureTransformer) NumFeatures() int {
	if e == nil {
		return 0
	}

	count := 4

	count += e.FirstFeature.NumFeatures()

	count += e.B안녕하세요1.NumFeatures()
	count += e.C안녕하세요0.NumFeatures()

	return count
}

// FeatureNames provides names of features that match output of transform
func (e *WeirdTagsFeatureTransformer) FeatureNames() []string {
	if e == nil {
		return nil
	}

	idx := 0
	names := make([]string, e.NumFeatures())

	names[idx] = "OnlyFeature"
	idx++

	names[idx] = "FeatureNotFirst"
	idx++

	for _, w := range e.FirstFeature.FeatureNames() {
		names[idx] = "FirstFeature_" + w
		idx++
	}

	names[idx] = "Multiline"
	idx++

	names[idx] = "A안녕하세요"
	idx++

	for _, w := range e.B안녕하세요1.FeatureNames() {
		names[idx] = "B안녕하세요1_" + w
		idx++
	}

	for _, w := range e.C안녕하세요0.FeatureNames() {
		names[idx] = "C안녕하세요0_" + w
		idx++
	}

	return names
}
