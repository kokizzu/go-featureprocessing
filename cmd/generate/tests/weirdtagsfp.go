// Code generated by go-featureprocessing DO NOT EDIT

package examplemodule

import (
	fp "github.com/nikolaydubina/go-featureprocessing/transformers"
)

// WeirdTagsFeatureTransformer is a feature processor for WeirdTags.
// It was automatically generated by go-featureprocessing tool.
type WeirdTagsFeatureTransformer struct {
	OnlyFeature     fp.MinMaxScaler
	FeatureNotFirst fp.MaxAbsScaler
	FirstFeature    fp.OneHotEncoder
	Multiline       fp.MaxAbsScaler
}

// Fit fits transformer for each field
func (e *WeirdTagsFeatureTransformer) Fit(s []WeirdTags) {
	if e == nil || len(s) == 0 {
		return
	}

	dataNum := make([]float64, len(s))
	dataStr := make([]string, len(s))

	for i, v := range s {
		dataNum[i] = float64(v.OnlyFeature)
	}

	e.OnlyFeature.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.FeatureNotFirst)
	}

	e.FeatureNotFirst.Fit(dataNum)

	for i, v := range s {
		dataStr[i] = string(v.FirstFeature)
	}

	e.FirstFeature.Fit(dataStr)

	for i, v := range s {
		dataNum[i] = float64(v.Multiline)
	}

	e.Multiline.Fit(dataNum)

}

// Transform transforms struct into feature vector accordingly to transformers
func (e *WeirdTagsFeatureTransformer) Transform(s *WeirdTags) []float64 {
	if s == nil || e == nil {
		return nil
	}

	features := make([]float64, e.GetNumFeatures())
	e.TransformInplace(features, s)
	return features
}

// TransformInplace transforms struct into feature vector accordingly to transformers, and does so inplace
func (e *WeirdTagsFeatureTransformer) TransformInplace(dst []float64, s *WeirdTags) {
	if s == nil || e == nil || len(dst) != e.GetNumFeatures() {
		return
	}

	idx := 0

	dst[idx] = e.OnlyFeature.Transform(float64(s.OnlyFeature))
	idx++

	dst[idx] = e.FeatureNotFirst.Transform(float64(s.FeatureNotFirst))
	idx++

	e.FirstFeature.TransformInplace(dst[idx:idx+e.FirstFeature.NumFeatures()], s.FirstFeature)
	idx += e.FirstFeature.NumFeatures()

	dst[idx] = e.Multiline.Transform(float64(s.Multiline))
	idx++

	return
}

// GetNumFeatures returns number of features in output feature vector
func (e *WeirdTagsFeatureTransformer) GetNumFeatures() int {
	if e == nil {
		return 0
	}

	count := 3

	count += e.FirstFeature.NumFeatures()

	return count
}
