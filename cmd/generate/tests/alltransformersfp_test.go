// Code generated by go-featureprocessing DO NOT EDIT

package examplemodule

import (
	"encoding/json"
	"testing"

	"github.com/google/gofuzz"
	"github.com/stretchr/testify/assert"
)

func TestAllTransformersFeatureTransformerTransform(t *testing.T) {
	t.Run("empty struct", func(t *testing.T) {
		var s AllTransformers
		fuzz.New().Fuzz(&s)

		tr := AllTransformersFeatureTransformer{}
		fuzz.New().NilChance(0).NumElements(1, 1).Fuzz(&tr)

		tr.Transform(&s)

		features := tr.Transform(&s)

		assert.NotNil(t, features)
		assert.True(t, len(features) > 0)
		assert.Equal(t, tr.GetNumFeatures(), len(features))
	})

	t.Run("fuzzy struct", func(t *testing.T) {
		var s AllTransformers
		fuzz.New().Fuzz(&s)

		tr := AllTransformersFeatureTransformer{}
		fuzz.New().NilChance(0).NumElements(1, 1).Fuzz(&tr)

		features := tr.Transform(&s)

		assert.NotNil(t, features)
		assert.True(t, len(features) > 0)
		assert.Equal(t, tr.GetNumFeatures(), len(features))
	})

	t.Run("transformer is nil and struct is not nil", func(t *testing.T) {
		var s AllTransformers
		fuzz.New().Fuzz(&s)

		var tr *AllTransformersFeatureTransformer

		features := tr.Transform(&s)

		assert.Nil(t, features)
		assert.Equal(t, tr.GetNumFeatures(), 0)
	})

	t.Run("transformer is not nil but struct is nil", func(t *testing.T) {
		var s *AllTransformers

		tr := AllTransformersFeatureTransformer{}
		fuzz.New().NilChance(0).NumElements(1, 1).Fuzz(&tr)

		features := tr.Transform(s)

		assert.Nil(t, features)
		assert.True(t, tr.GetNumFeatures() > 0)
	})

	t.Run("serialize and deserialize transformer", func(t *testing.T) {
		tr := AllTransformersFeatureTransformer{}
		fuzz.New().NilChance(0).NumElements(1, 1).Fuzz(&tr)

		output, err := json.Marshal(tr)
		assert.Nil(t, err)
		assert.NotEmpty(t, output)

		var tr2 AllTransformersFeatureTransformer
		err = json.Unmarshal(output, &tr2)
		assert.Nil(t, err)
		assert.Equal(t, tr, tr2)
	})
}

func TestAllTransformersFeatureTransformerFit(t *testing.T) {
	t.Run("fuzzy input", func(t *testing.T) {
		s := make([]AllTransformers, 10)
		fuzz.New().NilChance(0).NumElements(1, 1).Fuzz(&s)

		trEmpty := AllTransformersFeatureTransformer{}
		tr := AllTransformersFeatureTransformer{}
		tr.Fit(s)

		assert.NotNil(t, tr)
		assert.NotEqual(t, tr, trEmpty)
	})

	t.Run("not nil transformer nil input", func(t *testing.T) {
		trEmpty := AllTransformersFeatureTransformer{}
		tr := AllTransformersFeatureTransformer{}
		tr.Fit(nil)

		assert.Equal(t, trEmpty, tr)
	})

	t.Run("nil transformer not nil input", func(t *testing.T) {
		s := make([]AllTransformers, 10)

		var tr *AllTransformersFeatureTransformer
		tr.Fit(s)

		assert.Nil(t, tr)
	})
}

func fitTransformerAllTransformers(b *testing.B, numelem int) {
	s := make([]AllTransformers, numelem)
	fuzz.New().NilChance(0).NumElements(numelem, numelem).Fuzz(&s)

	var tr AllTransformersFeatureTransformer

	b.ResetTimer()
	for n := 0; n < b.N; n++ {
		tr.Fit(s)
	}
}

func BenchmarkAllTransformersFeatureTransformer_Fit_100elements(b *testing.B) {
	fitTransformerAllTransformers(b, 100)
}

func BenchmarkAllTransformersFeatureTransformer_Fit_1000elements(b *testing.B) {
	fitTransformerAllTransformers(b, 1000)
}

func BenchmarkAllTransformersFeatureTransformer_Fit_10000elements(b *testing.B) {
	fitTransformerAllTransformers(b, 10000)
}

func BenchmarkAllTransformersFeatureTransformer_Fit_100000elements(b *testing.B) {
	fitTransformerAllTransformers(b, 100000)
}

func BenchmarkAllTransformersFeatureTransformer_Transform(b *testing.B) {
	var s AllTransformers
	fuzz.New().Fuzz(&s)

	tr := AllTransformersFeatureTransformer{}
	fuzz.New().NilChance(0).NumElements(1, 1).Fuzz(&tr)

	b.ResetTimer()
	for n := 0; n < b.N; n++ {
		tr.Transform(&s)
	}
}

func benchLargeTransformerAllTransformers(b *testing.B, numelem int) {
	var s AllTransformers
	fuzz.New().Fuzz(&s)

	tr := AllTransformersFeatureTransformer{}
	fuzz.New().NilChance(0).NumElements(numelem, numelem).Fuzz(&tr)

	b.ResetTimer()
	for n := 0; n < b.N; n++ {
		tr.Transform(&s)
	}
}

func BenchmarkAllTransformersFeatureTransformer_Transform_LargeComposites_100elements(b *testing.B) {
	benchLargeTransformerAllTransformers(b, 100)
}

func BenchmarkAllTransformersFeatureTransformer_Transform_LargeComposites_1000elements(b *testing.B) {
	benchLargeTransformerAllTransformers(b, 1000)
}

func BenchmarkAllTransformersFeatureTransformer_Transform_LargeComposites_10000elements(b *testing.B) {
	benchLargeTransformerAllTransformers(b, 10000)
}

func BenchmarkAllTransformersFeatureTransformer_Transform_LargeComposites_100000elements(b *testing.B) {
	benchLargeTransformerAllTransformers(b, 100000)
}
