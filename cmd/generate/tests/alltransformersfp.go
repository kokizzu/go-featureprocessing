// Code generated by go-featureprocessing DO NOT EDIT

package examplemodule

import (
	fp "github.com/nikolaydubina/go-featureprocessing/transformers"
)

// AllTransformersFeatureTransformer is a feature processor for AllTransformers.
// It was automatically generated by go-featureprocessing tool.
type AllTransformersFeatureTransformer struct {
	Name0 fp.Identity
	Name1 fp.MinMaxScaler
	Name2 fp.MaxAbsScaler
	Name3 fp.StandardScaler
	Name4 fp.QuantileScaler
	Name5 fp.OneHotEncoder
	Name6 fp.OrdinalEncoder
	Name7 fp.KBinsDiscretizer
	Name8 fp.CountVectorizer
	Name9 fp.TfIdfVectorizer
}

// Fit fits transformer for each field
func (e *AllTransformersFeatureTransformer) Fit(s []AllTransformers) {
	if e == nil || len(s) == 0 {
		return
	}

	dataNum := make([]float64, len(s))
	dataStr := make([]string, len(s))

	for i, v := range s {
		dataNum[i] = float64(v.Name0)
	}

	e.Name0.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Name1)
	}

	e.Name1.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Name2)
	}

	e.Name2.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Name3)
	}

	e.Name3.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Name4)
	}

	e.Name4.Fit(dataNum)

	for i, v := range s {
		dataStr[i] = string(v.Name5)
	}

	e.Name5.Fit(dataStr)

	for i, v := range s {
		dataStr[i] = string(v.Name6)
	}

	e.Name6.Fit(dataStr)

	for i, v := range s {
		dataNum[i] = float64(v.Name7)
	}

	e.Name7.Fit(dataNum)

	for i, v := range s {
		dataStr[i] = string(v.Name8)
	}

	e.Name8.Fit(dataStr)

	for i, v := range s {
		dataStr[i] = string(v.Name9)
	}

	e.Name9.Fit(dataStr)

}

// Transform transforms struct into feature vector accordingly to transformers
func (e *AllTransformersFeatureTransformer) Transform(s *AllTransformers) []float64 {
	if s == nil || e == nil {
		return nil
	}

	features := make([]float64, 0, e.GetNumFeatures())

	features = append(features, e.Name0.Transform(float64(s.Name0)))
	features = append(features, e.Name1.Transform(float64(s.Name1)))
	features = append(features, e.Name2.Transform(float64(s.Name2)))
	features = append(features, e.Name3.Transform(float64(s.Name3)))
	features = append(features, e.Name4.Transform(float64(s.Name4)))
	features = append(features, e.Name5.Transform(string(s.Name5))...)
	features = append(features, e.Name6.Transform(string(s.Name6)))
	features = append(features, e.Name7.Transform(float64(s.Name7)))
	features = append(features, e.Name8.Transform(string(s.Name8))...)
	features = append(features, e.Name9.Transform(string(s.Name9))...)

	return features
}

// GetNumFeatures returns number of features in output feature vector
func (e *AllTransformersFeatureTransformer) GetNumFeatures() int {
	if e == nil {
		return 0
	}

	count := 7

	count += e.Name5.NumFeatures()

	count += e.Name8.NumFeatures()
	count += e.Name9.NumFeatures()

	return count
}
