// Code generated by go-featureprocessing DO NOT EDIT

package examplemodule

import (
	"sync"

	fp "github.com/nikolaydubina/go-featureprocessing/transformers"
)

// LargeMemoryTransformerFeatureTransformer is a feature processor for LargeMemoryTransformer.
// It was automatically generated by go-featureprocessing tool.
type LargeMemoryTransformerFeatureTransformer struct {
	Name1 fp.OneHotEncoder    `json:"Name1_onehot"`
	Name2 fp.OneHotEncoder    `json:"Name2_onehot"`
	Name3 fp.OrdinalEncoder   `json:"Name3_ordinal"`
	Name4 fp.OrdinalEncoder   `json:"Name4_ordinal"`
	Name5 fp.QuantileScaler   `json:"Name5_quantile"`
	Name6 fp.QuantileScaler   `json:"Name6_quantile"`
	Name7 fp.KBinsDiscretizer `json:"Name7_kbins"`
	Name8 fp.KBinsDiscretizer `json:"Name8_kbins"`
}

// Fit fits transformer for each field
func (e *LargeMemoryTransformerFeatureTransformer) Fit(s []LargeMemoryTransformer) {
	if e == nil || len(s) == 0 {
		return
	}

	dataNum := make([]float64, len(s))
	dataStr := make([]string, len(s))

	for i, v := range s {
		dataStr[i] = v.Name1
	}

	e.Name1.Fit(dataStr)

	for i, v := range s {
		dataStr[i] = v.Name2
	}

	e.Name2.Fit(dataStr)

	for i, v := range s {
		dataStr[i] = v.Name3
	}

	e.Name3.Fit(dataStr)

	for i, v := range s {
		dataStr[i] = v.Name4
	}

	e.Name4.Fit(dataStr)

	for i, v := range s {
		dataNum[i] = float64(v.Name5)
	}

	e.Name5.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Name6)
	}

	e.Name6.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Name7)
	}

	e.Name7.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Name8)
	}

	e.Name8.Fit(dataNum)

}

// Transform transforms struct into feature vector accordingly to transformers
func (e *LargeMemoryTransformerFeatureTransformer) Transform(s *LargeMemoryTransformer) []float64 {
	if s == nil || e == nil {
		return nil
	}
	features := make([]float64, e.NumFeatures())
	e.TransformInplace(features, s)
	return features
}

// TransformInplace transforms struct into feature vector accordingly to transformers, and does so inplace
func (e *LargeMemoryTransformerFeatureTransformer) TransformInplace(dst []float64, s *LargeMemoryTransformer) {
	if s == nil || e == nil || len(dst) != e.NumFeatures() {
		return
	}
	idx := 0

	e.Name1.TransformInplace(dst[idx:idx+e.Name1.NumFeatures()], s.Name1)
	idx += e.Name1.NumFeatures()

	e.Name2.TransformInplace(dst[idx:idx+e.Name2.NumFeatures()], s.Name2)
	idx += e.Name2.NumFeatures()

	dst[idx] = e.Name3.Transform((s.Name3))
	idx++

	dst[idx] = e.Name4.Transform((s.Name4))
	idx++

	dst[idx] = e.Name5.Transform(float64(s.Name5))
	idx++

	dst[idx] = e.Name6.Transform(float64(s.Name6))
	idx++

	dst[idx] = e.Name7.Transform(float64(s.Name7))
	idx++

	dst[idx] = e.Name8.Transform(float64(s.Name8))
	idx++

	return
}

// TransformAll transforms a slice of LargeMemoryTransformer
func (e *LargeMemoryTransformerFeatureTransformer) TransformAll(s []LargeMemoryTransformer) []float64 {
	if e == nil {
		return nil
	}
	features := make([]float64, len(s)*e.NumFeatures())
	e.TransformAllInplace(features, s)
	return features
}

// TransformAllInplace transforms a slice of LargeMemoryTransformer inplace
func (e *LargeMemoryTransformerFeatureTransformer) TransformAllInplace(dst []float64, s []LargeMemoryTransformer) {
	if e == nil {
		return
	}
	n := e.NumFeatures()
	if len(dst) != n*len(s) {
		return
	}
	for i, _ := range s {
		e.TransformInplace(dst[i*n:(i+1)*n], &s[i])
	}
}

// TransformAllParallel transforms a slice of LargeMemoryTransformer in parallel
func (e *LargeMemoryTransformerFeatureTransformer) TransformAllParallel(s []LargeMemoryTransformer, nworkers uint) []float64 {
	if e == nil {
		return nil
	}
	features := make([]float64, len(s)*e.NumFeatures())
	e.TransformAllInplaceParallel(features, s, nworkers)
	return features
}

// TransformAllInplaceParallel transforms a slice of LargeMemoryTransformer inplace parallel
// Useful for very large slices.
func (e *LargeMemoryTransformerFeatureTransformer) TransformAllInplaceParallel(dst []float64, s []LargeMemoryTransformer, nworkers uint) {
	if e == nil || nworkers == 0 {
		return
	}
	ns := uint(len(s))
	nf := uint(e.NumFeatures())
	if uint(len(dst)) != nf*ns {
		return
	}

	nbatch := ns / nworkers
	var wg sync.WaitGroup

	for i := uint(0); i < nworkers; i++ {
		wg.Add(1)
		go func(i uint) {
			defer wg.Done()
			iStart := nbatch * i
			iEnd := nbatch * (i + 1)
			if i == (nworkers - 1) {
				iEnd = ns
			}
			e.TransformAllInplace(dst[iStart*nf:iEnd*nf], s[iStart:iEnd])
		}(i)
	}

	wg.Wait()
}

// NumFeatures returns number of features in output feature vector
func (e *LargeMemoryTransformerFeatureTransformer) NumFeatures() int {
	if e == nil {
		return 0
	}

	count := 6
	count += e.Name1.NumFeatures()
	count += e.Name2.NumFeatures()

	return count
}

// FeatureNames provides names of features that match output of transform
func (e *LargeMemoryTransformerFeatureTransformer) FeatureNames() []string {
	if e == nil {
		return nil
	}

	idx := 0
	names := make([]string, e.NumFeatures())

	for _, w := range e.Name1.FeatureNames() {
		names[idx] = "Name1_" + w
		idx++
	}

	for _, w := range e.Name2.FeatureNames() {
		names[idx] = "Name2_" + w
		idx++
	}

	names[idx] = "Name3"
	idx++

	names[idx] = "Name4"
	idx++

	names[idx] = "Name5"
	idx++

	names[idx] = "Name6"
	idx++

	names[idx] = "Name7"
	idx++

	names[idx] = "Name8"
	idx++

	return names
}
