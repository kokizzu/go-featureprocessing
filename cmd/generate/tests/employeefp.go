// Code generated by go-featureprocessing DO NOT EDIT

package examplemodule

import (
	fp "github.com/nikolaydubina/go-featureprocessing/transformers"
)

// EmployeeFeatureTransformer is a feature processor for Employee.
// It was automatically generated by go-featureprocessing tool.
type EmployeeFeatureTransformer struct {
	Age         fp.Identity
	Salary      fp.MinMaxScaler
	Kids        fp.MaxAbsScaler
	Weight      fp.StandardScaler
	Height      fp.QuantileScaler
	City        fp.OneHotEncoder
	Car         fp.OrdinalEncoder
	Income      fp.KBinsDiscretizer
	Description fp.TFIDFVectorizer
}

// Fit fits transformer for each field
func (e *EmployeeFeatureTransformer) Fit(s []Employee) {
	if e == nil || len(s) == 0 {
		return
	}

	dataNum := make([]float64, len(s))
	dataStr := make([]string, len(s))

	for i, v := range s {
		dataNum[i] = float64(v.Age)
	}

	e.Age.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Salary)
	}

	e.Salary.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Kids)
	}

	e.Kids.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Weight)
	}

	e.Weight.Fit(dataNum)

	for i, v := range s {
		dataNum[i] = float64(v.Height)
	}

	e.Height.Fit(dataNum)

	for i, v := range s {
		dataStr[i] = string(v.City)
	}

	e.City.Fit(dataStr)

	for i, v := range s {
		dataStr[i] = string(v.Car)
	}

	e.Car.Fit(dataStr)

	for i, v := range s {
		dataNum[i] = float64(v.Income)
	}

	e.Income.Fit(dataNum)

	for i, v := range s {
		dataStr[i] = string(v.Description)
	}

	e.Description.Fit(dataStr)

}

// Transform transforms struct into feature vector accordingly to transformers
func (e *EmployeeFeatureTransformer) Transform(s *Employee) []float64 {
	if s == nil || e == nil {
		return nil
	}

	features := make([]float64, 0, e.GetNumFeatures())

	features = append(features, e.Age.Transform(float64(s.Age)))
	features = append(features, e.Salary.Transform(float64(s.Salary)))
	features = append(features, e.Kids.Transform(float64(s.Kids)))
	features = append(features, e.Weight.Transform(float64(s.Weight)))
	features = append(features, e.Height.Transform(float64(s.Height)))
	features = append(features, e.City.Transform(string(s.City))...)
	features = append(features, e.Car.Transform(string(s.Car)))
	features = append(features, e.Income.Transform(float64(s.Income)))
	features = append(features, e.Description.Transform(string(s.Description))...)

	return features
}

// GetNumFeatures returns number of features in output feature vector
func (e *EmployeeFeatureTransformer) GetNumFeatures() int {
	if e == nil {
		return 0
	}

	count := 7

	count += e.City.NumFeatures()

	count += e.Description.NumFeatures()

	return count
}
